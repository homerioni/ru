generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum ROLE {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          ROLE      @default(USER)

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Club {
  id Int @id @default(autoincrement())

  name    String  @unique
  logoSrc String
  Match   Match[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Player {
  id       Int           @id @default(autoincrement())
  name     String
  photo    String
  position String
  matches  Int           @default(0)
  goals    Int           @default(0)
  assists  Int           @default(0)
  playedIn MatchPlayer[]
  events   MatchEvent[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Match {
  id      Int           @id @default(autoincrement())
  type    String        @default("Товарищеский матч")
  date    DateTime
  score   Int[]         @default([])
  club    Club          @relation(fields: [clubId], references: [id])
  clubId  Int
  players MatchPlayer[]
  events  MatchEvent[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model MatchPlayer {
  id       Int    @id @default(autoincrement())
  match    Match  @relation(fields: [matchId], references: [id])
  player   Player @relation(fields: [playerId], references: [id])
  matchId  Int
  playerId Int

  @@unique([matchId, playerId])
}

enum EventType {
  GOAL
  ASSIST
}

model MatchEvent {
  id       Int       @id @default(autoincrement())
  type     EventType
  minute   Int?
  match    Match     @relation(fields: [matchId], references: [id])
  player   Player    @relation(fields: [playerId], references: [id])
  matchId  Int
  playerId Int

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}
