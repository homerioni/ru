generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum ROLE {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          ROLE      @default(USER)
  points        Int       @default(1000)

  bets UserBet[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Club {
  id      Int    @id @default(autoincrement())
  name    String @unique
  logoSrc String

  homeMatches Match[] @relation("HomeClubMatches")
  awayMatches Match[] @relation("AwayClubMatches")

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Player {
  id       Int     @id @default(autoincrement())
  name     String
  photo    String
  position String
  number   Int
  isShow   Boolean

  playedIn MatchPlayer[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Match {
  id          Int      @id @default(autoincrement())
  date        DateTime
  score       Int[]    @default([])
  round       Int?
  yellowCards Int?     @default(0)
  redCards    Int?     @default(0)

  players MatchPlayer[]

  betEvent BetEvent?

  type   MatchType @relation(fields: [typeId], references: [id])
  typeId Int

  homeClub   Club @relation("HomeClubMatches", fields: [homeClubId], references: [id])
  homeClubId Int

  awayClub   Club @relation("AwayClubMatches", fields: [awayClubId], references: [id])
  awayClubId Int

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model MatchPlayer {
  id      Int @id @default(autoincrement())
  goals   Int @default(0)
  assists Int @default(0)

  match   Match @relation(fields: [matchId], references: [id], onDelete: Cascade)
  matchId Int

  player   Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId Int

  @@unique([matchId, playerId])
}

model MatchType {
  id        Int     @id @default(autoincrement())
  name      String
  fullName  String
  year      Int?
  isArchive Boolean @default(false)
  isLeague  Boolean @default(false)

  matches Match[]
}

model BetType {
  id   Int    @id @default(autoincrement())
  name String
  code String @unique

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model BetOption {
  id    Int    @id @default(autoincrement())
  name  String
  code  String
  ratio Int[]

  betEvent   BetEvent @relation(fields: [betEventId], references: [id], onDelete: Cascade)
  betEventId Int

  bets UserBet[]
}

model UserBet {
  id     Int   @id @default(autoincrement())
  points Int
  value  Json?

  betOption BetOption @relation(fields: [betId], references: [id], onDelete: Cascade)
  betId     Int

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model BetEvent {
  id          Int     @id @default(autoincrement())
  isCompleted Boolean @default(false)

  events BetOption[]

  match   Match @relation(fields: [matchId], references: [id])
  matchId Int   @unique

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}
